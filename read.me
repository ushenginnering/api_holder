To use a PHP API with JavaScript in an HTML project, you'll typically employ the `fetch` API or other AJAX methods to communicate with the PHP server-side code. Below are step-by-step instructions:

### 1. Setting up your HTML file:
Create an HTML file where you will use JavaScript to interact with the PHP API. 

```html
<!DOCTYPE html>
<html>
<head>
    <title>PHP API and JavaScript</title>
</head>
<body>
    <!-- Your HTML content -->
    
    <script>
        // JavaScript code to interact with the PHP API
    </script>
</body>
</html>
```

### 2. Write JavaScript to call the PHP API using Fetch:
In the `<script>` tag, use JavaScript to call the PHP API using `fetch`. For example, to interact with the API you've written:

```javascript
// Example using fetch to interact with your PHP API
fetch('your_php_api_endpoint.php', {
    method: 'POST', // or 'GET' based on your API
    headers: {
        'Content-Type': 'application/json',
        // Add additional headers if required
    },
    body: JSON.stringify({
        // Your data to send to the PHP API
        // Example: If your API expects an email and password
        email: 'user@example.com',
        password: 'examplepassword'
    })
})
.then(response => response.json())
.then(data => {
    // Process the response from the PHP API
    console.log(data); // Print or process the received data
})
.catch(error => {
    // Handle any errors occurred during API interaction
    console.error('Error:', error);
});
```

### 3. Run in a Server Environment:
For security reasons, AJAX requests do not work when you open an HTML file directly in a browser due to cross-origin restrictions. To test this, run the HTML file from a local or online server. You can use tools like XAMPP, WAMP, or set up a local server using Node.js (with packages like `http-server` or `express`).

### Important Notes:
- **Replace `'your_php_api_endpoint.php'`** with the actual endpoint of your PHP API file.
- **Adjust the data sent and received** in the `fetch` request based on the requirements of your API.
- **Handle responses** in the `.then` block as needed. The API response can be accessed and processed within this block.

Remember to ensure your server is running and your PHP API file is properly set up to handle requests coming from your HTML page.

This example demonstrates a basic way to connect your HTML/JavaScript frontend to a PHP API backend, but there are many nuances and potential complexities involved in a real-world application. Always consider security measures and error handling in your code.
